
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

zone:
  - name: Home
    latitude: !secret home_latitude
    longitude: !secret home_longitude
    icon: mdi:home
    radius: 250
  - name: Extended home
    latitude: !secret home_latitude
    longitude: !secret home_longitude
    radius: 15000
    passive: true

homeassistant:
  customize:
    person.lubos:
      entity_picture: /local/lubos.png
    person.janca:
      entity_picture: /local/janca.png

http:
  base_url: !secret hassio_url
  server_port: !secret hassio_port
  ssl_certificate: /config/certs/fullchain.pem
  ssl_key: /config/certs/SSLprivatekey.key

# lovelace:
#   mode: yaml

tts:
  - platform: google_translate

media_player:
  - platform: philips_js
    host: !secret philips_tv_ip
    api_version: 6
    turn_on_action:
      service: wake_on_lan.send_magic_packet
      data:
        mac: !secret philips_tv_mac
  - platform: frontier_silicon
    host: !secret fs_speaker_ip
    name: Frontier Silicon Speaker
  # - platform: kodi
  #   host: !secret xbox_ip
  #   port: !secret kodi_port
  - platform: virgintivo
    tivos:
      1:
        name: Virgin Tivo
        host: !secret virgin_tivo_ip
    tvchannellists:
      enable: True

light:
  - platform: philips_ambilight
    name: Ambilight
    host: !secret philips_tv_ip

vacuum:
  - platform: xiaomi_miio
    host: !secret xiaomi_vacuum_ip
    token: !secret xiaomi_vacuum_token

speedtestdotnet:
  scan_interval:
    hours: 3
  monitored_conditions:
    - ping
    - download
    - upload

sensor:
  - platform: template
    sensors:
      sunset_time:
        value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%I:%M") %} {{ timestamp.lstrip("0") }}'
        friendly_name: "Next setting"
      sunrise_time:
        value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%I:%M") %} {{ timestamp.lstrip("0") }}'
        friendly_name: "Next rising"
      washer_status:
        friendly_name: "Washing Machine"
        value_template: >
          {% set washer_state = states('sensor.washing_machine_washer_job_state') %}
          {% set off_states = ["none", "finish"] %}
          {%- if washer_state in off_states -%}Off
          {%- elif washer_state == "weightSensing" -%}Weighing
          {%- elif washer_state == "delayWash" -%}Delay
          {%- elif washer_state == "rinse" -%}Rinsing
          {%- elif washer_state == "spin" -%}Spinning
          {%- elif washer_state == "wash" -%}Washing
          {%- else -%}{{ washer_state }}
          {%- endif %}
      washer_eta:
        friendly_name: "Completion Time Estimate"
        value_template: >
          {% set washer_state = states('sensor.washer_status') %}
          {%- if washer_state == "Off" -%}None
          {%- else -%}{{ as_timestamp(strptime(states('sensor.washing_machine_washer_completion_time'), "")) | timestamp_custom("%H:%M") }}
          {%- endif %}
      doorbell_last_triggered:
        friendly_name: "Doorbell pressed"
        value_template: >
          {% set date = strptime(states.automation.doorbell.attributes.last_triggered, '') %}
          {%- if date.date() != now().date() -%}Not today
          {%- else -%}{{ as_timestamp(date) | timestamp_custom('%H:%M') }}
          {%- endif %}

binary_sensor:
  - platform: workday
    country: GB

yeelight:
  devices:
    !secret dining_room_light_ip:
      name: Dining Room Light
    !secret living_room_light_ip:
      name: Living Room Light
    !secret living_room_lamp_ip:
      name: Living Room Lamp
    !secret bedroom_light_ip:
      name: Bedroom Lamp
    !secret office_lamp_ip:
      name: Office Lamp
    !secret loft_lamp_ip:
      name: Loft Lamp

input_select:
  play_radio:
    name: Choose a radio to play
    options:
      - Select radio
      - Český rozhlas Radiožurnál
      - Rádio Krokodýl

garbage_collection:
  sensors:
  - name: General Rubbish
    frequency: "odd-weeks"
    collection_days: wed
    verbose_state: True
    verbose_format: "on {date}, in {days} days"
    expire_after: '10:00'
    exclude_dates:
    - '2020-12-30'
    include_dates:
    - '2020-12-31'
  - name: Recycling Waste
    frequency: "even-weeks"
    collection_days: wed
    verbose_state: True
    verbose_format: "on {date}, in {days} days"
    expire_after: '10:00'
  - name: Garden Waste
    frequency: "even-weeks"
    collection_days: wed
    first_month: "mar"
    last_month: "nov"
    verbose_state: True
    verbose_format: "on {date}, in {days} days"
    expire_after: '10:00'

utility_meter:
  energy:
    source: sensor.ovo_last_electricity_reading
    cycle: monthly

sonoff:
  username: !secret sonoff_username
  password: !secret sonoff_password

wake_on_lan:

group: !include groups.yaml
automation: !include_dir_merge_list automations/
script: !include_dir_merge_named scripts/
